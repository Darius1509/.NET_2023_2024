@page "/updateproduct/{id:guid}"
@using ECommerceApp.App.Contracts
@using ECommerceApp.App.ViewModels

<MudText Typo="Typo.h3">Update Product</MudText>

@if (!string.IsNullOrEmpty(Message))
{
    <MudAlert Severity="Severity.Info">@Message</MudAlert>
}

<MudForm Model="@ProductViewModel" @ref="form">
    <MudPaper Elevation="2" Class="pa-4">
        <MudTextField T="string" Label="Name:" @bind-Value="@ProductViewModel.Name" FullWidth />
         <MudTextField T="string" Label="Description:" @bind-Value="@ProductViewModel.Description" FullWidth multiline />
         <MudTextField T="int" Label="Price:" @bind-Value="@ProductViewModel.Price" FullWidth />
         <MudTextField T="int" Label="Quantity:" @bind-Value="@ProductViewModel.Quantity" FullWidth />

         <MudSelect T="Guid" Label="Category:" @bind-Value="@ProductViewModel.ProductCategoryId" FullWidth>
            <MudSelectItem Value="new Guid()" Disabled>Select Category</MudSelectItem>
            @foreach (var category in Categories)
            {
                <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
            }
        </MudSelect>

        <MudButton OnClick="HandleValidSubmit" Color="Color.Primary">Update Product</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
    </MudPaper>
</MudForm>

@code {
    [Inject]
    public IProductDataService ProductDataService { get; set; }

    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    public ProductViewModel ProductViewModel { get; set; } = new ProductViewModel();

    public List<CategoryViewModel> Categories { get; set; } = new List<CategoryViewModel>();

    public string Message { get; set; }

    private MudForm form;

    protected override async Task OnInitializedAsync()
    {
        ProductViewModel = await ProductDataService.GetProductByIdAsync(Id);
        Categories = await CategoryDataService.GetCategoriesAsync();
    }

    private async Task HandleValidSubmit()
    {
        var result = await ProductDataService.UpdateProductAsync(ProductViewModel);
        if (result.IsSuccess)
        {
            Message = "Product updated successfully";
            NavigationManager.NavigateTo("/productoverview");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/productoverview");
    }
}
