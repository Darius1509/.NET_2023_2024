@page "/updateproduct/{id:guid}"
@using ECommerceApp.App.Contracts
@using ECommerceApp.App.ViewModels
<h3>Update Product</h3>

<EditForm Model="@ProductViewModel" OnValidSubmit="@HandleValidSubmit">
<DataAnnotationsValidator />
	<ValidationSummary></ValidationSummary>
	<div class="row mb-3 ms-2">
		<label for="name" class="col-sm-3 form-label">Name: </label>
		<div class="col-sm-5">
			<InputText id="name" class="form-control" @bind-Value="@ProductViewModel.Name" placeholder="Enter name"></InputText>
			<ValidationMessage For="@(() => ProductViewModel.Name)" />
		</div>
		<label for="description" class="col-sm-3 form-label">Description: </label>
		<div class="col-sm-5">
			<InputText id="description" class="form-control" @bind-Value="@ProductViewModel.Description" placeholder="Enter description"></InputText>
			<ValidationMessage For="@(() => ProductViewModel.Description)" />
		</div>
	</div>
	<div class="row mb-3 ms-2">
		<label for="price" class="col-sm-3 form-label">Price: </label>
		<div class="col-sm-5">
			<InputNumber id="price" class="form-control" @bind-Value="@ProductViewModel.Price" placeholder="Enter price"></InputNumber>
			<ValidationMessage For="@(() => ProductViewModel.Price)" />
		</div>
        <label for="category" class="col-sm-3 form-label">Category: </label>
        <div class="col-sm-5">
            <select id="category" class="form-control" @bind="@ProductViewModel.ProductCategoryId">
                <option value="">Select Category</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => ProductViewModel.ProductCategoryId)" />
        </div>
        <label for="quantity" class="col-sm-3 form-label">Quantity:</label>
        <div>
            <InputNumber id="quantity" class="form-control" @bind-Value="@ProductViewModel.Quantity" placeholder="Enter quantity"></InputNumber>
			<ValidationMessage For="@(() => ProductViewModel.Quantity)" />
        </div>
	</div>
	<button type="submit" class="btn btn-primary">Update product</button>
	<button class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [Inject]
    public IProductDataService ProductDataService { get; set; }

    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    public ProductViewModel ProductViewModel { get; set; } = new ProductViewModel();

    public List<CategoryViewModel> Categories { get; set; } = new List<CategoryViewModel>();

    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProductViewModel = await ProductDataService.GetProductByIdAsync(Id);
        Categories = await CategoryDataService.GetCategoriesAsync();
    }

    private async Task HandleValidSubmit()
    {
        var result = await ProductDataService.UpdateProductAsync(ProductViewModel);
        if (result.IsSuccess)
        {
            Message = "Product updated successfully";
            NavigationManager.NavigateTo("/productoverview");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/productoverview");
    }
}
