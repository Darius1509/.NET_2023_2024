@page "/updatecategory/{id:guid}"
@using ECommerceApp.App.Contracts
@using ECommerceApp.App.ViewModels

<MudText Typo="Typo.h3">Update Category</MudText>

@if (!string.IsNullOrEmpty(Message))
{
    <MudAlert Severity="Severity.Info">@Message</MudAlert>
}

<MudForm Model="@CategoryViewModel" @ref="form">
    <MudPaper Elevation="2" Class="pa-4">
        <MudTextField T="string" Label="Category Name:" @bind-Value="@CategoryViewModel.Name" FullWidth />

         <MudButton OnClick="HandleValidSubmit" Color="Color.Primary">Update Category</MudButton>
         <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
     </MudPaper>
 </MudForm>

@code {
    [Inject]
    public ICategoryDataService CategoryDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    public CategoryViewModel CategoryViewModel { get; set; } = new CategoryViewModel();

    public string Message { get; set; }

    private MudForm form;

    protected override async Task OnInitializedAsync()
    {
        CategoryViewModel = await CategoryDataService.GetCategoryByIdAsync(Id);
    }

    private async Task HandleValidSubmit()
    {
        var result = await CategoryDataService.UpdateCategoryAsync(CategoryViewModel);
        if (result.IsSuccess)
        {
            Message = "Category updated successfully";
            NavigationManager.NavigateTo("/categoryoverview");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/categoryoverview");
    }
}
