@page "/addaddress"
@using ECommerceApp.App.Contracts
@using ECommerceApp.App.ViewModels
@inject IAddressDataService AddressDataService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h3">Add Address</MudText>

@if (!string.IsNullOrEmpty(Message))
{
    <MudAlert Severity="Severity.Info">@Message</MudAlert>
}

<MudForm Model="@AddressViewModel" @ref="form">
    <MudPaper Elevation="2" Class="p-4">
        <MudTextField T="string" Label="Street:" @bind-Value="@AddressViewModel.StreetName" FullWidth />
         <MudTextField T="int" Label="Postal Code:" @bind-Value="@AddressViewModel.PostalCode" FullWidth />
         <MudTextField T="string" Label="City:" @bind-Value="@AddressViewModel.City" FullWidth />
         <MudTextField T="string" Label="Country:" @bind-Value="@AddressViewModel.Country" FullWidth />

         <MudButton OnClick="@HandleValidSubmit" ButtonType="ButtonType.Submit" Color="Color.Primary">Save Address</MudButton>
         <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
     </MudPaper>
 </MudForm>

 @code {
    public AddressViewModel AddressViewModel { get; set; } = new AddressViewModel();
    public string Message { get; set; }
    private MudForm form;

    private async Task HandleValidSubmit()
    {
        var result = await AddressDataService.CreateAddressAsync(AddressViewModel);
        if (result.IsSuccess)
        {
            Message = "Address created successfully";
            NavigationManager.NavigateTo("/addressoverview");
        }
        else
        {
            Message = result.Message;
            if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
            {
                Message += result.ValidationErrors;
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/addressoverview");
    }
}
